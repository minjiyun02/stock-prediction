
from flask import Flask, render_template, request, redirect, url_for
#import lstm
import numpy as np
import tensorflow
from keras.models import load_model
from sklearn.preprocessing import MinMaxScaler
from tensorflow import keras
import pandas as pd
import matplotlib.pyplot as plt

import io
import base64


app = Flask(__name__)

# Load your pre-trained machine learning model here
model = load_model('lstm.h5')

def preprocess_data(filepath):
    data = pd.read_csv(filepath)
    scaler = MinMaxScaler()
    scaled_data = scaler.fit_transform(data[['close', 'change_percent', 'volume', 'avg_vol_20d']])
    return scaled_data

# Function to create features for the LSTM model
def create_features(data, time_steps):
    X = []
    for i in range(len(data) - time_steps):
        X.append(data[i:i+time_steps])
    return np.array(X)

@app.route("/")
def index():
    return render_template("index.html")

#def upload():
#    # Handle file upload here
#    # Simulating a delay for demonstration purposes
#    import time
#    time.sleep(2)
#    return redirect(url_for("result"))


@app.route("/predict", methods=["POST"])
def predict():
    if request.method == 'POST':
        file = request.files['file']
        if file:
            filepath = 'uploaded_data.csv'
            file.save(filepath)
            try:
                # Preprocess data and create features
                data = preprocess_data(filepath)
                time_steps = 60
                features = create_features(data, time_steps)
                
                # Reshape features to match expected input shape
                features = features.reshape(-1, time_steps, 1)
                
                # Predict market crash
                predictions = model.predict(features)
                
                # Flatten the predictions for displaying
                predictions = predictions.flatten().tolist()
                
                # Plot the predicted classes
                plt.figure(figsize=(12, 6))
                plt.plot(predictions, label='Prediction', linewidth=0.1)
                plt.title('Stock Prediction')
                plt.xlabel('Data points')
                plt.ylabel('Predicted values generated by model')
                plt.legend()
                plt.grid(True)
                
                # Convert plot to a base64-encoded image
                buffer = io.BytesIO()
                plt.savefig(buffer, format='png')
                buffer.seek(0)
                plot_data = base64.b64encode(buffer.getvalue()).decode()
                plt.close()  # Close the plot to prevent it from being displayed in the browser
                
                # Pass predictions and plot data to the result.html template
                return render_template('result.html', predictions=predictions, plot_data=plot_data)
            
            except Exception as e:
                return str(e), 500
        return render_template('upload.html')

    else:
        return "Something went wrong. Please try again."



if __name__ == "__main__":
    app.run(debug=True)